package com.mc_3.userCreator.report;

import java.util.Optional;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mc_3.userCreator.score.Score;
import com.mc_3.userCreator.user.User;

import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import io.swagger.annotations.ApiOperation;

/**
 * @author Eric Kirch
 * Methods related to Reports, for use with Puzzle Game
 */
@Controller // This means that this class is a Controller
public class ReportController 
{
	/**
	 * The data type which is used in order to manipulate report data
	 */
	@Autowired // This means to get the bean called userRepository// Which is auto-generated by Spring, we will use it to handle the data
	private ReportRepository reportRepository;
	
	/**
	 * Method to get all reports within the data base
	 * @return: JSON containing every report in the database
	 */
	@ApiOperation(value = "Returns all reports in the database")
	@GetMapping(path="/allReports")
	public @ResponseBody Iterable<Report> getAllReports() 
	{
		// This returns a JSON or XML with the users
		return reportRepository.findAll();
	}
	
	@ApiOperation(value = "Adds a report to the database given the puzzle id, and a description")
	@PostMapping(path="/addReport/{pid}/{desc}") // Map ONLY POST Requests
	public @ResponseBody String addNewReport (@PathVariable Integer pid, @PathVariable String desc) 
	{
		Report r=new Report();
		
		Integer idToBe=Math.abs(new Random().nextInt());

		while(reportRepository.findById(idToBe).isPresent()!=false)
		{
			idToBe=Math.abs(new Random().nextInt());
		}
		
		r.setId(idToBe);
		r.setPuzzleId(pid);
		r.setReportDescription(desc);

		reportRepository.save(r);
		return "Report Saved";
	}
	
	@ApiOperation(value = "Deletes a report from the database given a report ID")
	@PostMapping(path="/deleteReport/{rid}") // Map ONLY POST Requests
	public @ResponseBody String deleteReport (@PathVariable Integer rid)
	{
		reportRepository.deleteById(rid);
		return "Report deleted!";
	}
	
	@ApiOperation(value = "Returns all report for a specific puzzle given its PID")
	@GetMapping(path="/reportsByPID/{pid}")
	public @ResponseBody Iterable<Report> getReportssByPID(@PathVariable Integer pid) 
	{
		return reportRepository.findByPuzzleId(pid);
	}
}
